########################
## Assignment for DA2 ##
##  and for Coding    ##
##                    ##
##   NO. 1            ##
## Get the data       ##
########################
# Clear memory and call packages
rm(list=ls())
library(WDI)
library(tidyverse)
# Download COVID cross-sectional data
date <- '09-11-2020'
covid_url <- paste0('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/',
date,'.csv')
covid_raw <- read.csv(covid_url)
# Download population data for 2019
pop_raw <- WDI(indicator=c('SP.POP.TOTL'),
country="all", start=2019, end=2019)
# Save the raw files
my_path <- "/Users/Dominik/OneDrive - Central European University/1st_trimester/DA2/Assignment1/"
# covid data
write_csv(covid_raw, paste0(my_path,'data/raw/covid_09_11_2020_raw.csv'))
# population data
write_csv(pop_raw, paste0(my_path,'raw/pop_WDI_2019.csv'))
# population data
write_csv(pop_raw, paste0(my_path,'data/raw/pop_WDI_2019.csv'))
# Clear memory and call packages
rm(list=ls())
library(tidyverse)
# Read the raw files
my_path <- "/Users/Dominik/OneDrive - Central European University/1st_trimester/DA2/Assignment1/"
# covid data
cv <- read_csv(paste0(my_path,'data/raw/covid_09_11_2020_raw.csv'))
# population data
pop <- read_csv(paste0(my_path,'data/raw/pop_WDI_2019.csv'))
####
# COVID DATA CLEANING
#
# Check covid data
glimpse( cv )
# Drop not needed variables
cv <- cv %>% select( -c( FIPS,Admin2,Last_Update,Lat,Long_,Combined_Key,Incidence_Rate,Case.Fatality_Ratio))
# One observation to be one country
# Check e.g. China:
cv %>% filter( Country_Region == 'China')
# Create new data table now only contains the countries
cv2 <- cv %>%
group_by( Country_Region ) %>%
summarise_if(is.numeric,lst( sum ) )
# Rename variables
cv2 <- cv2 %>% rename( country   = Country_Region ,
confirmed = Confirmed_sum,
death     = Deaths_sum,
recovered = Recovered_sum,
active    = Active_sum )
## Check the observations:
# 1) Filter out grouping observations based on using digits
pop <- pop %>% filter( !grepl("[[:digit:]]", pop$iso2c) )
# 2nd drop specific values
drop_id <- c("EU","HK","OE")
pop <- pop %>% filter( !grepl( paste( drop_id , collapse="|"), pop$iso2c ) )
# 3rd drop values with certain starting char
# Get the first letter from iso2c
fl_iso2c <- substr(pop$iso2c, 1, 1)
retain_id <- c("XK","ZA","ZM","ZW")
# Filter out everything which starts X or Z except countries in retain_id
pop <- pop %>% filter( !( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), pop$iso2c ) ) )
rm( drop_id, fl_iso2c , retain_id )
# Retain and rename variables which are going to be used later
pop <-pop %>% transmute( country = country,
population=SP.POP.TOTL )
df <- full_join(cv2,pop)
# Correct some country names by hand
use_name <- c("Congo, Rep.","Congo, Dem. Rep.","Czech Republic","Korea, Rep.","Kyrgyz Republic",
"Laos","St. Kitts and Nevis","St. Lucia","St. Vincent and the Grenadines",
"Slovak Republic","United States","Myanmar")
alter_name <- c("Congo (Brazzaville)","Congo (Kinshasa)","Czechia","Korea, South","Kyrgyzstan",
"Lao PDR","Saint Kitts and Nevis","Saint Lucia","Saint Vincent and the Grenadines",
"Slovakia","US","Burma")
# Simply use a for-cycle to change the name for the countries (note: ordering is important)
for ( i in seq_along( use_name ) ){
df$country[ df$country == alter_name[ i ] ] <- use_name[ i ]
}
# Write a for-loop to find those which are partial or complete matches!
# 1) auxillary table for countries without any population value
aux <- df %>% filter( is.na(population) )
# 2) Get the name of the countries
countries_nm <- aux$country
# 3) Iterate through all potential partial matches
for ( i in seq_along( countries_nm ) ){
# Select those observations where partial match exists
log_select <- str_detect( df$country , countries_nm[ i ] )
# Get the population values for partial matches
c_partial <- df$population[ log_select ]
# If there is a match: only two countries are selected and one is missing the other has population:
if ( length( c_partial ) == 2 & sum( is.na( c_partial ) ) == 1 ){
# Replace the missing value with the match
df$population[ log_select & is.na(df$population)] = c_partial[ !is.na( c_partial ) ]
# Remove the replaced variable
df <- df %>% filter( !(log_select & is.na( df$confirmed ) ) )
}
}
# 4) Check the results:
df %>% filter( is.na(population) )
#####
# Handle missing values:
View( df %>% filter( !complete.cases(df) ) )
# Drop if population, confirmed cases or death is missing
df <- df %>% filter( !( is.na( population ) | is.na( confirmed ) | is.na( death ) ))
#####
# Save clean data
my_path <- "Documents/Egyetem/CEU/Teaching_2020/Coding_with_R/Codes_4_prep/Assignment_covid/data/"
#####
# Save clean data
my_path <- "/Users/Dominik/OneDrive - Central European University/1st_trimester/DA2/Assignment1/"
# COVID data
write_csv( df , paste0(my_path,'data/clean/covid_pop_09_11_2020_clean.csv'))
